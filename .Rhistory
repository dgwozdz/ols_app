radioButtons('sep', 'Separator',
c(Comma=',',
Semicolon=';',
Tab='\t'),
',')
),
column(3,
radioButtons('quote', 'Quote',
c(None='',
'Double Quote'='"',
'Single Quote'="'"),
'"')
)
),
tableOutput("first.two"),
fluidRow(
column(4,
textInput("time.var", h3("Input time variable:"),
value = ""))
),
p(strong("Variables to choose from:"), textOutput("possible.variables")),
p(strong("Classes of variables"), textOutput("variable.classes"))
)
)
server <- function(input, output){
dset.in <- reactive({
infile <- input$file1
if(is.null(infile)){
return(NULL)
}
df <- read.csv(infile$datapath, header = input$header,
sep = input$sep,quote = input$quote)
return(df)}
)
# Change column type to date
# dset.in()$date.input <- observeEvent({
#   dset.in()[,input$time.var] <- lubridate::date_decimal(dset.in()[,input$time.var])
# })
modified_dset <- eventReactive(input$time.var, {
dset.in()[, input$time.var] <- lubridate::date_decimal(dset.in()[,input$time.var])
})
output$first.two <- renderTable({head(dset.in(), 2)})
output$possible.variables <- renderText(
names(modified_dset())
)
output$variable.classes <- renderText(
sapply(dset.in(), class)
)
}
shinyApp(ui = ui, server = server)
#====================================================================#
# Author:             Damian Gwozdz (DG)
# Code:               Shiny app for creation of OLS models
# Creation date:      03SEP201
# Last modified:      -
# Description:        -
# Required functions: ols
#
#====================================================================#
library(shiny)
# source("ols.R")
# options(shiny.maxRequestSize=1*1024^2)
ui <- fluidPage(
titlePanel("Test"),
mainPanel(
fluidRow(
column(5,
fileInput('file1', "Input a csv file:"),
accept=c('text/csv',
'text/comma-separated-values,text/plain',
'.csv'),
checkboxInput('header', 'Header', TRUE)),
column(3,
radioButtons('sep', 'Separator',
c(Comma=',',
Semicolon=';',
Tab='\t'),
',')
),
column(3,
radioButtons('quote', 'Quote',
c(None='',
'Double Quote'='"',
'Single Quote'="'"),
'"')
)
),
tableOutput("first.two"),
fluidRow(
column(4,
textInput("time.var", h3("Input time variable:"),
value = ""))
),
p(strong("Variables to choose from:"), textOutput("possible.variables")),
p(strong("Classes of variables"), textOutput("variable.classes"))
)
)
server <- function(input, output){
dset.in <- reactive({
infile <- input$file1
if(is.null(infile)){
return(NULL)
}
df <- read.csv(infile$datapath, header = input$header,
sep = input$sep,quote = input$quote)
return(df)}
)
# Change column type to date
# dset.in()$date.input <- observeEvent({
#   dset.in()[,input$time.var] <- lubridate::date_decimal(dset.in()[,input$time.var])
# })
modified_dset <- eventReactive(input$time.var, {
dset.in()[, input$time.var] <-
lubridate::date_decimal(dset.in()[,input$time.var])
})
output$first.two <- renderTable({head(dset.in(), 2)})
output$possible.variables <- renderText(
names(modified_dset())
)
output$variable.classes <- renderText(
sapply(dset.in(), class)
)
}
shinyApp(ui = ui, server = server)
lubridate::date_decimal(as.factor('1991-06-02 02:00:00'))
lubridate::date_decimal(as.character(as.factor('1991-06-02 02:00:00')))
as.character(as.factor('1991-06-02 02:00:00'))
as.numeric(as.factor('1991-06-02 02:00:00'))
as.Date('1991-06-02 02:00:00', format = "%m/%d/%Y %H:%M:%S")
as.Date('1991-06-02 02:00:00', format = "%Y/%m/%d %H:%M:%S")
as.Date('1991-06-02 02:00:00', format = "%Y-%m-%d %H:%M:%S")
mdy_hms('1991-06-02 02:00:00')
mdy_hms(as.factor('1991-06-02 02:00:00'))
lubridate::mdy_hms(as.factor('1991-06-02 02:00:00'))
library(lubridate)
lubridate::ymd_hms(as.factor('1991-06-02 02:00:00'))
library(rpart)
fit <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis)
library(rpart.plot)
install.packages("rpart.plot")
library(rpart.plot)
rpart.plot(fit)
rpart.plot(fit, box.palette="-RdYlGn")
rpart.plot(fit, box.palette="-RdYlGn", type = 1)
rpart.plot(fit, box.palette="-RdYlGn", type = 2)
rpart.plot(fit, box.palette="-RdYlGn", type = 3)
rpart.plot(fit, box.palette="-RdYlGn", type = 4)
rpart.plot(fit, box.palette="-RdYlGn", type = 2)
kyphosis
fit <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis[1:79])
rpart.plot(fit, box.palette="-RdYlGn", type = 2)
fit <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis[1:80])
rpart.plot(fit, box.palette="-RdYlGn", type = 2)
fit <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis[1:75])
rpart.plot(fit, box.palette="-RdYlGn", type = 2)
fit <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis[1:75,])
rpart.plot(fit, box.palette="-RdYlGn", type = 2)
fit <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis[1:76,])
rpart.plot(fit, box.palette="-RdYlGn", type = 2)
fit <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis[1:77,])
rpart.plot(fit, box.palette="-RdYlGn", type = 2)
fit <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis[1:78,])
rpart.plot(fit, box.palette="-RdYlGn", type = 2)
fit <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis[1:79,])
rpart.plot(fit, box.palette="-RdYlGn", type = 2)
fit <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis[1:80,])
rpart.plot(fit, box.palette="-RdYlGn", type = 2)
cs.data <- read.csv("C:\Users\kaksat\Desktop\Training50.csv")
cs.data <- read.csv("C:/Users/kaksat/Desktop/Training50.csv")
names(cs.data)
head(cs.data)
cs.data <- rpart(Creditability ~ ., data = cs.data[1:80,])
rpart.plot(fit, box.palette="-RdYlGn", type = 2)
cs.data <- rpart(Creditability ~ ., data = cs.data[1:800,])
dim(cs.data)
cs.data <- read.csv("C:/Users/kaksat/Desktop/Training50.csv")
library(rpart)
library(rpart.plot)
fit <- rpart(Creditability ~ ., data = cs.data[1:800,])
rpart.plot(fit, box.palette="-RdYlGn", type = 2)
dim(cs.data)
fit <- rpart(Creditability ~ ., data = cs.data[1:450,])
rpart.plot(fit, box.palette="-RdYlGn", type = 2)
fit <- rpart(Creditability ~ ., data = cs.data[1:480,])
rpart.plot(fit, box.palette="-RdYlGn", type = 2)
fit <- rpart(Creditability ~ ., data = cs.data[1:300,])
rpart.plot(fit, box.palette="-RdYlGn", type = 2)
fit <- rpart(Creditability ~ ., data = cs.data[1:250,])
rpart.plot(fit, box.palette="-RdYlGn", type = 2)
fit <- rpart(Creditability ~ ., data = cs.data[1:100,])
fit <- rpart(Creditability ~ ., data = cs.data[1:200,])
rpart.plot(fit, box.palette="-RdYlGn", type = 2)
fit <- rpart(Creditability ~ ., data = cs.data[1:300,])
rpart.plot(fit, box.palette="-RdYlGn", type = 2)
fit <- rpart(Creditability ~ ., data = cs.data[1:400,])
rpart.plot(fit, box.palette="-RdYlGn", type = 2)
fit <- rpart(Creditability ~ ., data = cs.data[1:500,])
rpart.plot(fit, box.palette="-RdYlGn", type = 2)
library(manipulate)
setwd("U:/WWW/ekonometria_bayesowska")
#Wektor wielu równomiernie rozłożonych punktów z odcinka (0,1) jako rozpatrywana dziedzina parametru p
p <- seq(from = 0.005, to = 0.995, by = 0.005)
#Wartość oczekiwana i odchylenie standardowe parametru (a priori)
p_prior <- 0.696
p_sd_prior <- 0.15
#W dalszej części obliczeń posługujemy się następującym przeliczeniem na parametry alpha i beta rozkładu beta:
#alpha_prior <- (p_prior^2) * (1 - p_prior)/(p_sd_prior^2)-p_prior
#beta_prior <- (p_prior)*((1-p_prior)^2)/(p_sd_prior^2)-(1-p_prior)
#Definicje kolorów do wykresów
grey_area <- rgb(160, 160, 160, 80, names = NULL, maxColorValue = 255)
grey_line <- rgb(80, 80, 80, 160, names = NULL, maxColorValue = 255)
green_area <- rgb(24, 121, 104, 80, names = NULL, maxColorValue = 255)
green_line <- rgb(13, 85, 72, 160, names = NULL, maxColorValue = 255)
#Rozkład a priori
png(file = "01_a_priori.png", width = 800, height = 500, res = 100)
manipulate(
#Zaczynamy konstruować wykres - plot
{plot(p, rep(0, 199), lwd = 2, las = 1, bty = "n", col = grey_area,
ylim = c(0,8), type = "l", ylab = "gęstość",
main = substitute(paste("Rozkład ", italic("a priori"), " prawdopodobieństwa porażki Polski")))
#Obliczamy parametry a priori (należy to zrobić w bloku manipulate / plot!)
alpha_prior <- (p_prior ^ 2) * (1 - p_prior) / (p_sd_prior ^ 2) - p_prior
beta_prior <- (p_prior) * ((1 - p_prior) ^ 2) / (p_sd_prior ^ 2) - (1 - p_prior)
#Szkicujemy pole pod wykresem
polygon(c(p, rev(p)), c(dbeta(p, alpha_prior, beta_prior),
rep(0, length(p))), col = grey_area, border = NA)
#Zaznaczamy wartość oczekiwaną
abline(v = p_prior, col = grey_line, lwd = 3)
text(p_prior,max(dbeta(p, alpha_prior, beta_prior))+1,paste("E(p) a priori =",p_prior),col=grey_line)
#Legenda wykresu
legend(x="top",legend=c(expression(paste("prawdopodobieństwo ",italic("a priori")))),fill=c(grey_area))},
#Zasadnicza część polecenia manipulate - wartość oczekiwaną i odchylenie standardowe a priori...
#...będziemy mogli zmieniać suwakami, modyfikując wykres
p_prior=slider(0.01, 1, step=0.01, initial=0.696),
p_sd_prior=slider(0.01, 0.5, step=0.01, initial=0.15) )
dev.off()
#Instalacja i załadowanie pakietów (pakiet manipulate tworzy interaktywne wykresy i działa w RStudio)
# install.packages("manipulate")
library(manipulate)
setwd("U:/WWW/ekonometria_bayesowska")
#Instalacja i załadowanie pakietów (pakiet manipulate tworzy interaktywne wykresy i działa w RStudio)
# install.packages("manipulate")
library(manipulate)
setwd("U:/WWW/ekonometria_bayesowska")
#Wektor wielu równomiernie rozłożonych punktów z odcinka (0,1) jako rozpatrywana dziedzina parametru p
p <- seq(from = 0.005, to = 0.995, by = 0.005)
#Wartość oczekiwana i odchylenie standardowe parametru (a priori)
p_prior <- 0.696
p_sd_prior <- 0.15
#Definicje kolorów do wykresów
grey_area <- rgb(160, 160, 160, 80, names = NULL, maxColorValue = 255)
grey_line <- rgb(80, 80, 80, 160, names = NULL, maxColorValue = 255)
green_area <- rgb(24, 121, 104, 80, names = NULL, maxColorValue = 255)
green_line <- rgb(13, 85, 72, 160, names = NULL, maxColorValue = 255)
#Rozkład a priori
png(file = "01_a_priori.png", width = 800, height = 500, res = 100)
manipulate(
#Zaczynamy konstruować wykres - plot
{plot(p, rep(0, 199), lwd = 2, las = 1, bty = "n", col = grey_area,
ylim = c(0,8), type = "l", ylab = "gęstość",
main = substitute(paste("Rozkład ", italic("a priori"), " prawdopodobieństwa porażki Polski")))
#Obliczamy parametry a priori (należy to zrobić w bloku manipulate / plot!)
alpha_prior <- (p_prior ^ 2) * (1 - p_prior) / (p_sd_prior ^ 2) - p_prior
beta_prior <- (p_prior) * ((1 - p_prior) ^ 2) / (p_sd_prior ^ 2) - (1 - p_prior)
#Szkicujemy pole pod wykresem
polygon(c(p, rev(p)), c(dbeta(p, alpha_prior, beta_prior),
rep(0, length(p))), col = grey_area, border = NA)
#Zaznaczamy wartość oczekiwaną
abline(v = p_prior, col = grey_line, lwd = 3)
text(p_prior,max(dbeta(p, alpha_prior, beta_prior))+1,paste("E(p) a priori =",p_prior),col=grey_line)
#Legenda wykresu
legend(x="top",legend=c(expression(paste("prawdopodobieństwo ",italic("a priori")))),fill=c(grey_area))},
#Zasadnicza część polecenia manipulate - wartość oczekiwaną i odchylenie standardowe a priori...
#...będziemy mogli zmieniać suwakami, modyfikując wykres
p_prior=slider(0.01, 1, step=0.01, initial=0.696),
p_sd_prior=slider(0.01, 0.5, step=0.01, initial=0.15) )
dev.off()
#Dane: 3 mecze, 0 porażek
y <- c(0, 1, 1)
n <- length(y)
k <- sum(y)
#Rozkład a posteriori
likelihood <- sapply(p, function(p) { prod(p^y * (1-p)^(1-y)) } )
like.rescale <- 3 * likelihood/max(likelihood)
alpha_posterior <- (p_prior^2)*(1-p_prior)/(p_sd_prior^2)-p_prior + k
beta_posterior <- (p_prior)*((1-p_prior)^2)/(p_sd_prior^2)-(1-p_prior) + n - k
p_posterior <- alpha_posterior/(alpha_posterior+beta_posterior)
p_sd_posterior <- (alpha_posterior*beta_posterior)/(((alpha_posterior+beta_posterior)^2)*(alpha_posterior+beta_posterior+1))
png(file="01_a_posteriori.png",width=800,height=500,res=100)
manipulate(
{plot(p, like.rescale, lwd=2, las=1, bty="n",
ylim=c(0,8), type="l", ylab="gęstość",
main=substitute(paste("Rozkład ",italic("a priori")," i ",italic("a posteriori")," prawdopodobieństwa porażki Polski")))
alpha_prior <- (p_prior^2)*(1-p_prior)/(p_sd_prior^2)-p_prior
beta_prior <- (p_prior)*((1-p_prior)^2)/(p_sd_prior^2)-(1-p_prior)
alpha_posterior <- alpha_prior + k
beta_posterior <- beta_prior + n - k
p_posterior <- alpha_posterior/(alpha_posterior+beta_posterior)
lines(p, dbeta(p, alpha_prior, beta_prior), col=grey_area, lwd=2)
polygon(c(p, rev(p)), c(dbeta(p, alpha_prior, beta_prior),
rep(0, length(p))), col=grey_area, border=NA)
lines(p, dbeta(p, alpha_posterior, beta_posterior), col=green_area, lwd=2)
polygon(c(p, rev(p)), c(dbeta(p, alpha_posterior, beta_posterior),
rep(0, length(p))), col=green_area, border=NA)
lines(p, like.rescale, lwd=2)
abline(v=p_prior,col=grey_line,lwd=3)
text(p_prior,max(dbeta(p, alpha_prior, beta_prior))+1,paste("E(p) a priori =",p_prior),col=grey_line)
abline(v=p_posterior,col=green_line,lwd=3)
text(p_posterior,max(dbeta(p, alpha_posterior, beta_posterior))+2,paste("E(p) a posteriori =",round(p_posterior,digits=4)),col=green_line)
legend(x="top",legend=c(expression(paste("prawdopodobieństwo ",italic("a priori"))),expression(paste("prawdopodobieństwo ",italic("a posteriori"))),"wartość funkcji wiarygodności danych (przeskalowana)"),fill=c(grey_area,green_area,rgb(0,0,0,1)))},
p_prior=slider(0.01, 1, step=0.01, initial=0.696),
p_sd_prior=slider(0.01, 0.5, step=0.01, initial=0.15) )
dev.off()
#Instalacja i załadowanie pakietów (pakiet manipulate tworzy interaktywne wykresy i działa w RStudio)
# install.packages("manipulate")
library(manipulate)
setwd("U:/WWW/ekonometria_bayesowska")
#Wektor wielu równomiernie rozłożonych punktów z odcinka (0,1) jako rozpatrywana dziedzina parametru p
p <- seq(from = 0.005, to = 0.995, by = 0.005)
#Wartość oczekiwana i odchylenie standardowe parametru (a priori)
p_prior <- 0.696
p_sd_prior <- 0.15
#Definicje kolorów do wykresów
grey_area <- rgb(160, 160, 160, 80, names = NULL, maxColorValue = 255)
grey_line <- rgb(80, 80, 80, 160, names = NULL, maxColorValue = 255)
green_area <- rgb(24, 121, 104, 80, names = NULL, maxColorValue = 255)
green_line <- rgb(13, 85, 72, 160, names = NULL, maxColorValue = 255)
#Rozkład a priori
png(file = "01_a_priori.png", width = 800, height = 500, res = 100)
manipulate(
#Zaczynamy konstruować wykres - plot
{plot(p, rep(0, 199), lwd = 2, las = 1, bty = "n", col = grey_area,
ylim = c(0,8), type = "l", ylab = "gęstość",
main = substitute(paste("Rozkład ", italic("a priori"), " prawdopodobieństwa porażki Polski")))
#Obliczamy parametry a priori (należy to zrobić w bloku manipulate / plot!)
alpha_prior <- (p_prior ^ 2) * (1 - p_prior) / (p_sd_prior ^ 2) - p_prior
beta_prior <- (p_prior) * ((1 - p_prior) ^ 2) / (p_sd_prior ^ 2) - (1 - p_prior)
#Szkicujemy pole pod wykresem
polygon(c(p, rev(p)), c(dbeta(p, alpha_prior, beta_prior),
rep(0, length(p))), col = grey_area, border = NA)
#Zaznaczamy wartość oczekiwaną
abline(v = p_prior, col = grey_line, lwd = 3)
text(p_prior,max(dbeta(p, alpha_prior, beta_prior))+1,paste("E(p) a priori =",p_prior),col=grey_line)
#Legenda wykresu
legend(x="top",legend=c(expression(paste("prawdopodobieństwo ",italic("a priori")))),fill=c(grey_area))},
#Zasadnicza część polecenia manipulate - wartość oczekiwaną i odchylenie standardowe a priori...
#...będziemy mogli zmieniać suwakami, modyfikując wykres
p_prior=slider(0.01, 1, step=0.01, initial=0.696),
p_sd_prior=slider(0.01, 0.5, step=0.01, initial=0.15) )
dev.off()
install.packages("gputools")
model <- ols(dset = iris,
target = "Sepal.Length",
vars = "Sepal.Width",
visualize = T, output.residuals = T, time.series = F)
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2,10,20, labels=c("Ctl","Trt"))
weight <- c(ctl, trt)
anova(lm.D9 <- gpuLm(weight ~ group))
library(gputools)
install.packages("C:/Users/kaksat/AppData/Local/Temp/RtmpaiqzvV/downloaded_packages/gputools_1.1.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/kaksat/Desktop/gputools_1.1.tar.gz", repos = NULL, type = "source")
# parameters
dset <- iris
target <- "Sepal.Length"
vars <- "Sepal.Width Petal.Width"
time.var <- NULL
dset <- EuStockMarkets
target <- "DAX"
vars <- "FTSE CAC"
alpha <- .05
intercept <- T
if(sum(class(dset) == "ts")>0){
dset <- data.frame(as.matrix(dset),
date.custom=as.yearmon(time(dset)))
}else if(length(time.var)>0 & class(dset[, time.var]) != "Date"){
dset$date.custom <- date_decimal(dset[,time.var])
}
# else{
#   stop("Declared data set is not an object of class 'ts' or
#        the time variable was not declared")
# }
vars.split <- unlist(strsplit(vars, " "))
nvars <- if(intercept == T){length(vars.split)+1}else{length(vars.split)}
if(time.series == T){
dset <- dset[,c(target, vars.split, "date.custom")]
}else if(!is.null(time.var)){
dset <- dset[,c(target, vars.split, time.var)]
}else{
dset <- dset[,c(target, vars.split)]
}
intercept.string <- if(intercept == T){""}else{"-1"}
ols.formula <- as.formula(paste0(target, "~", gsub(" ", "+", vars), intercept.string))
model.original <- lm(formula = ols.formula, data = dset)
model <- summary(model.original)
model.original <- lm.fit(formula = ols.formula, data = dset)
model <- summary(model.original)
ols.formula
lm.fit(y = dset[[target]], x = dset[[vars]])
dset[[target]]
target
dset
dset[[target]]
dset[[DAX]]
head(dset)
dset[["DAX"]]
lm.fit(y = dset[,target], x = dset[,vars])
dset[,target]
x = dset[,vars]
vars
lm.fit(y = dset[,target], x = dset[,vars.split])
model <- lm.fit(y = dset[,target], x = dset[,vars.split])
model.stats <- data.frame(target = NA, vars = NA, R2 = NA,
adjusted.R2 = NA, RMSE = NA, F.stat = NA, F.p.value = NA,
bp.stat = NA, bp.p.value = NA, bg.stat = NA,
bg.p.value = NA, reset.stat = NA,
reset.p.value = NA, ad.stat = NA, ad.p.value = NA,
sw.stat = NA, sw.p.value = NA,
chow.stat = NA, chow.p.value = NA,
max.vif = NA,
tests = NA, n = NA, equation = NA)
model.stats$target <- target
model.stats$vars <- vars
model.stats$R2 <- model$r.squared
model.stats$adjusted.R2 <- model$adj.r.squared
model.stats$RMSE <- RMSE(predict(model.original),
# both: target and predicted value must be available to
# reliably compute RMSE
dset[apply(dset, 1, function(x) !sum(is.na(x))),
c(target, vars.split)])
library(lmtest)
# install.packages("nortest")
library(nortest) # Anderson-Darling test
library(car) # VIF
library(caret) # RMSE
library(scales) # percent() function
library(plotly) # interactive predicted vs. observed plot
# install.packages("strucchange")
library(strucchange) # chow test
# install.packages("lubridate")
library(lubridate)
model.stats$RMSE <- RMSE(predict(model.original),
# both: target and predicted value must be available to
# reliably compute RMSE
dset[apply(dset, 1, function(x) !sum(is.na(x))),
c(target, vars.split)])
model.stats$F.stat <- model$fstatistic["value"]
model.stats$F.p.value <- pf(model$fstatistic[1], model$fstatistic[2],
model$fstatistic[3], lower=FALSE)
model$fstatistic["value"]
breusch.pagan <- bptest(model)
model
bptest
breusch.pagan <- bptest(ols.formula)
ols.formula
breusch.pagan <- bptest(ols.formula, data = dset)
breusch.godfrey <- bgtest(ols.formula, data = dset)
reset <- resettest(ols.formula, data = dset)
anderson.darling <- ad.test(model$residuals)
anderson.darling
shapiro.wilk <- shapiro.test(model$residuals)
chow <- sctest(ols.formula, type = "Chow", data = dset)
model$coefficients
model$coefficients[,"Estimate"]
model$coefficients
model
str(model)
ols.formula
.lm.fit(ols.formula)
.lm.fit(y = dset$DAX, x = dset[, c("FTSE", "CAC")])
dset$DAX
dset
.lm.fit(y = dset[,DAX], x = dset[, c("FTSE", "CAC")])
.lm.fit(y = dset[,"DAX"], x = dset[, c("FTSE", "CAC")])
summary(.lm.fit(y = dset[,"DAX"], x = dset[, c("FTSE", "CAC")]))
n < 10^3
system.time(
for(i in 1:n){
model <- lm(y = dset[,"DAX"], x = dset[, c("FTSE", "CAC")])
})
n < 10^3
n <- 10^3
system.time(
for(i in 1:n){
model <- lm(y = dset[,"DAX"], x = dset[, c("FTSE", "CAC")])
})
system.time(
for(i in 1:n){
model <- lm(ols.formula, data = dset)
})
install.packages("ggpubr")
uninstall.packages("ggpubr")
remove.packages("ggpubr")
install.packages("C:/Users/kaksat/Desktop/ggpubr_0.1.6.tar.gz", repos = NULL, type = "source")
library(ggpubr)
("a", "b", "c") - c("a")
c("a", "b", "c") - c("a")
iris[, c("Petal.Length")]
iris[, -c("Petal.Length")]
iris[, names(iris) != "Petal.Length"]
iris[, names(iris) != %in% c("Petal.Length", "Petal.Width"]
iris[, !(names(iris) %in% c("Petal.Length", "Petal.Width")]
!(names(iris) %in% c("Petal.Length", "Petal.Width")
)
iris[, !(names(iris) %in% c("Petal.Length", "Petal.Width"))]
# install.packages("shiny")
library(shiny)
runGitHub("OLS", "dgwozdz")
library(rsconnect)
setwd('F:/Damian/github/app_ols2_2')
deployApp(appName = 'ols_app')
